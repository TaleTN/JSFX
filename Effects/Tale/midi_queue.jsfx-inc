desc:Sample accurate MIDI queue
// Copyright (C) 2012-2015 Theo Niessink
// License: GPL - http://www.gnu.org/licenses/gpl.html

/* Example

   desc:Mono synth

   import midi_queue.jsfx-inc
   import poly_blep.jsfx-inc

   @init

   // Set MIDI queue local memory index and size.
   midiq.midiq_init(0, 256);

   @block

   // Receive MIDI messages and add them to queue.
   midiq.midiq_collect();

   @sample

   // Remove MIDI message from the head of queue.
   while(midiq.midiq_remove()) (

     // Parse MIDI message.
     status = midiq.msg1 & 0xF0;
     velocity = midiq.msg3;

     // Note On
     status == 0x90 && velocity ? (
       note = midiq.msg2;
       osc.poly_setf(440 * 2^((note - 69) / 12));
     ) :

     // Note Off
     status == 0x80 || (status == 0x90 && !velocity) ? (
       midiq.msg2 == note ? osc.poly_setf(0);
     );
   );

   // Square wave oscillator.
   osc.dt > 0 ? spl0 = spl1 = 0.25 * osc.poly_sqr();

   Initialisation Functions

    * midiq_init(index[, size])
      Example: midiq.midiq_init(0, 256);
      Sets the offset and size (omit for unlimited size) of the local memory
      buffer to store the queue in, and returns the next available memory
      index (i.e. index+size*3).

      Note: You should call this function from the @init section.

    * midiq_alloc(size)
    * midiq_free()
      Example: midiq.midiq_alloc(256);
      Allocates/deallocates a block of local memory to store the queue in,
      and returns its index.

      Note: Requires malloc.jsfx-inc.

   Queue Functions

    * midiq_collect()
    * midiq_collect(ch, mask)
      Example: midiq.midiq_collect();
      Receives any MIDI messages, optionally filtering by channel (0..15,
      <0=any) and status byte (1=Note Off, 2=Note On, 4=Poly Aftertouch,
      8=Control Change, 16=Program Change, 32=Channel Atertouch, 64=Pitch
      Bend).

      Note: You should call this function from the @block section.

    * midiq_remove()
      Example: is_avail = midiq.midiq_remove();
      Checks if a MIDI message is available, removes it from the queue, and
      stores it in the msg1, msg2, and msg3 instance variables.

      Note: You should call this function in a while loop from the @sample
      section.

   Miscellaneous Functions

    * midiq_rewind()
      Example: midiq.midiq_rewind();
      Rewinds the queue, so new MIDI messages can be added.

      Note: This function is automatically called by midiq_collect().

    * midiq_add(ofs, msg1, msg23)
    * midiq_add(ofs, msg1, msg2, msg3)
      Example: midiq.midiq_add(0, 0x90, 60, 127);
      Adds a MIDI message to the queue.

   Instance Variables

    * ofs
      Example: offset_in_seconds = midiq.ofs / srate;
      The offset within the current sample block, in samples.

    * msg1
    * msg2
    * msg3
    * msg23
      Example: ch = midiq.msg1 & 0x0F;
      The MIDI message that was last removed from the queue.

    * buf
      Example: index = midiq.buf;
      The local memory index in which the queue is stored.

    * size
      Example: num_items = midiq.size * 3;
      The maximum size of the queue, in MIDI messages.

    * head
    * tail
      Example: num_msgs = (midiq.tail - midiq.head) / 3;
      Example: num_avail = midiq.size - (midiq.tail - midiq.buf) / 3;
      Pointers to the head and tail of the queue.

*/

@init


function midiq_init(index, size)
  instance(buf)
(
  buf = index;
  this.size = size;

  buf + size * 3;
);

function midiq_init(index)
  instance(buf, size)
(
  size = 0;
  buf = index;
);


function midiq_rewind()
  instance(buf, head, tail, ofs)
(
  head = tail = buf;
  ofs = 0;
);


function midiq_add(ofs, msg1, msg23)
  instance(buf, size, tail)
(
  !size || tail < buf + size * 3 ? (
    tail[0] = ofs;
    tail[1] = msg1;
    tail[2] = msg23;
    tail += 3;
  );
);

function midiq_add(ofs, msg1, msg2, msg3)
(
  this.midiq_add(ofs, msg1, msg2 | (msg3 << 8));
);


function midiq_collect(ch, mask)
  local(ofs, msg1, msg23)
(
  this.midiq_rewind();

  while(
    midirecv(ofs, msg1, msg23) ? (
      (ch < 0 || msg1 & 0x0F == ch) && mask & (1 << ((msg1 >> 4) - 8)) ? this.midiq_add(ofs, msg1, msg23);
      midisend(ofs, msg1, msg23);
    );
  );
);

function midiq_collect()
(
  this.midiq_collect(-1, 127);
);


function midiq_remove()
  instance(head, tail, ofs, msg1, msg2, msg3, msg23)
(
  head < tail && head[] <= ofs ? (
    msg1  = head[1];
    msg23 = head[2];
    msg2 = msg23 & 0x7F;
    msg3 = msg23 >> 8;
    head += 3;
  ) : (
    ofs += 1;
    0;
  );
);
