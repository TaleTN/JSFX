desc:2nd order RBJ filter
// Copyright (C) 2012-2015 Theo Niessink
// License: GPL - http://www.gnu.org/licenses/gpl.html

// Based on "Cookbook formulae for audio EQ biquad filter coefficients" by
// Robert Bristow-Johnson.
// http://www.musicdsp.org/files/Audio-EQ-Cookbook.txt

/* Example

   desc:Low-pass filter
   slider1:1000<20,20000,1>Corner Frequency (Hz)
   slider2:0.5<0.01,4.0,0.01>Q

   import rbj_filter.jsfx-inc

   @slider
   lp.rbj_lp(slider1, slider2);

   @sample
   mono = 0.5 * (spl0 + spl1);
   spl0 = spl1 = lp.rbj_df1(mono);

   Setting Functions

    * rbj_lp(f, q)                  -- Low-pass
    * rbj_hp(f, q)                  -- High-pass
    * rbj_bp(f, q)                  -- Band-pass (constant skirt gain)
    * rbj_bp2(f, q)                 -- Band-pass (constant 0 dB peak gain)
    * rbj_notch(f, q)               -- Notch
    * rbj_ap(f, q)                  -- All-pass
    * rbj_peak(f, q, db_gain)       -- Peaking EQ
    * rbj_low_shelf(f, q, db_gain)  -- Low-shelf
    * rbj_high_shelf(f, q, db_gain) -- High-shelf
      Example: lp.rbj_lp(1000, 0.5);
      Sets up the filter for the specified cutoff frequency (in Hz) and Q
      factor.

   Filter Functions

    * rbj_df1(s) -- Direct Form 1
    * rbj_df2(s) -- Direct Form 2
      Example: ss = lp.rbj_df2(s);
      Sends the parameter through the filter, and returns its output.

   Miscellaneous Functions

    * rbj_reset1() -- Direct Form 1
    * rbj_reset2() -- Direct Form 2
      Example: lp.rbj_reset2();
      Resets the filter state.

*/

@init


function _rbj_w0(f)
(
  2*$pi * min(f, 0.49 * srate) / srate;
);

function rbj_scale(a0)
  instance(a1, a2, b0, b1, b2)
(
  a1 /= a0;
  a2 /= a0;

  b0 /= a0;
  b1 /= a0;
  b2 /= a0;
);


// Low-pass

function rbj_lp(f, q)
  local(w0, cos_w0, alpha, a0)
  instance(a1, a2, b0, b1, b2)
(
  w0 = _rbj_w0(f);
  cos_w0 = cos(w0);
  alpha = sin(w0) / (2*q);

  b1 = 1 - cos_w0;
  b0 = b2 = 0.5 * b1;
  a0 = 1 + alpha;
  a1 = -2 * cos_w0;
  a2 = 1 - alpha;

  this.rbj_scale(a0);
);


// High-pass

function rbj_hp(f, q)
  local(w0, cos_w0, alpha, a0)
  instance(a1, a2, b0, b1, b2)
(
  w0 = _rbj_w0(f);
  cos_w0 = cos(w0);
  alpha = sin(w0) / (2*q);

  b1 = -1 - cos_w0;
  b0 = b2 = -0.5 * b1;
  a0 = 1 + alpha;
  a1 = -2 * cos_w0;
  a2 = 1 - alpha;

  this.rbj_scale(a0);
);


// Band-pass (constant skirt gain, peak gain = Q)

function rbj_bp(f, q)
  local(w0, alpha, a0)
  instance(a1, a2, b0, b1, b2)
(
  w0 = _rbj_w0(f);
  alpha = sin(w0) / (2*q);

  b0 = q * alpha;
  b1 = 0;
  b2 = -b0;
  a0 = 1 + alpha;
  a1 = -2 * cos(w0);
  a2 = 1 - alpha;

  this.rbj_scale(a0);
);


// Band-pass (constant 0 dB peak gain)

function rbj_bp2(f, q)
  local(w0, alpha, a0)
  instance(a1, a2, b0, b1, b2)
(
  w0 = _rbj_w0(f);
  alpha = sin(w0) / (2*q);

  b0 = alpha;
  b1 = 0;
  b2 = -alpha;
  a0 = 1 + alpha;
  a1 = -2 * cos(w0);
  a2 = 1 - alpha;

  this.rbj_scale(a0);
);


// Notch

function rbj_notch(f, q)
  local(w0, alpha, a0)
  instance(a1, a2, b0, b1, b2)
(
  w0 = _rbj_w0(f);
  alpha = sin(w0) / (2*q);

  b0 = b2 = 1;
  b1 = a1 = -2 * cos(w0);
  a0 = 1 + alpha;
  a2 = 1 - alpha;

  this.rbj_scale(a0);
);


// All-pass

function rbj_ap(f, q)
  local(w0, alpha, a0)
  instance(a1, a2, b0, b1, b2)
(
  w0 = _rbj_w0(f);
  alpha = sin(w0) / (2*q);

  b0 = a2 = 1 - alpha;
  b1 = a1 = -2 * cos(w0);
  b2 = a0 = 1 + alpha;

  this.rbj_scale(a0);
);


// Peaking EQ

function rbj_peak(f, q, db_gain)
  local(w0, alpha, a, a0)
  instance(a1, a2, b0, b1, b2)
(
  w0 = _rbj_w0(f);
  alpha = sin(w0) / (2*q);
  a = 10^(db_gain / 40);

  b0 = 1 + alpha * a;
  b1 = a1 = -2 * cos(w0);
  b2 = 1 - alpha * a;
  a0 = 1 + alpha / a;
  a2 = 1 - alpha / a;

  this.rbj_scale(a0);
);


// Low-shelf

function rbj_low_shelf(f, q, db_gain)
  local(w0, cos_w0, a, tmp0, tmp1, tmp2, a0)
  instance(a1, a2, b0, b1, b2)
(
  w0 = _rbj_w0(f);
  cos_w0 = cos(w0);
  a = 10^(db_gain / 40);

  tmp0 = 2 * sqrt(a) * sin(w0) / (2 * q);
  tmp1 = (a + 1) - (a - 1) * cos_w0;
  tmp2 = (a + 1) + (a - 1) * cos_w0;

  b0 = a * (tmp1 + tmp0);
  b1 = 2 * a * ((a - 1) - (a + 1) * cos_w0);
  b2 = a * (tmp1 - tmp0);
  a0 = tmp2 + tmp0;
  a1 = -2 * ((a - 1) + (a + 1) * cos_w0);
  a2 = tmp2 - tmp0;

  this.rbj_scale(a0);
);


// High-shelf

function rbj_high_shelf(f, q, db_gain)
  local(w0, cos_w0, a, tmp0, tmp1, tmp2, a0)
  instance(a1, a2, b0, b1, b2)
(
  w0 = _rbj_w0(f);
  cos_w0 = cos(w0);
  a = 10^(db_gain / 40);

  tmp0 = 2 * sqrt(a) * sin(w0) / (2 * q);
  tmp1 = (a + 1) - (a - 1) * cos_w0;
  tmp2 = (a + 1) + (a - 1) * cos_w0;

  b0 = a * (tmp2 + tmp0);
  b1 = -2 * a * ((a - 1) + (a + 1) * cos_w0);
  b2 = a * (tmp2 - tmp0);
  a0 = tmp1 + tmp0;
  a1 = 2 * ((a - 1) - (a + 1) * cos_w0);
  a2 = tmp1 - tmp0;

  this.rbj_scale(a0);
);


// Direct Form 1

function rbj_df1(s)
  instance(a1, a2, b0, b1, b2, x0, x1, y0, y1)
  local(x2, y2)
(
  x2 = x1;
  x1 = x0;
  x0 = s;

  y2 = y1;
  y1 = y0;
  y0 = b0*x0 + b1*x1 + b2*x2 - a1*y1 - a2*y2;
);

function rbj_reset1()
  instance(x0, x1, y0, y1)
(
  x0 = x1 = y0 = y1 = 0;
);


// Direct Form 2

function rbj_df2(s)
  instance(a1, a2, b0, b1, b2, w0, w1)
  local(w2)
(
  w2 = w1;
  w1 = w0;
  w0 = s - a1*w1 - a2*w2;

  b0*w0 + b1*w1 + b2*w2;
);

function rbj_reset2()
  instance(w0, w1)
(
  w0 = w1 = 0;
);
