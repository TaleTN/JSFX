desc:Collection of window functions
// Copyright (C) 2015, 2016 Theo Niessink
// License: GPL - http://www.gnu.org/licenses/gpl.html

// Window functions from Wikipedia (unless noted otherwise).
// http://en.wikipedia.org/wiki/Window_function

/* Example

   desc:Low-pass windowed FIR filter
   slider1:1000<20,20000,1>Cutoff (Hz)
   slider2:1<0,1,1{Rectangular,Blackman}>Window Function

   import Tale/window_functions.jsfx-inc

   @init

   fir_len = floor(64 / 44100 * srate + 0.5);

   in_buf = 0;
   fir_buf = in_buf + fir_len;

   pdc_bot_ch = 0; pdc_top_ch = 2;
   pdc_delay = floor(fir_len / 2);

   @slider

   // Source: http://www.labbookpages.co.uk/audio/firWindowing.html

   m = fir_len - 1;
   ft = min(0.5, slider1 / srate);

   n = scale = 0;
   loop(fir_len,
     // Low-pass filter.
     lpf = n != m/2 ? sin(2*$pi*ft*(n - m/2)) / ($pi*(n - m/2)) : 2*ft;

     // Apply window.
     lpf *= slider2 < 0.5 ? wnd_rect(n, fir_len) : wnd_blackman(n, fir_len);
     scale += lpf;

     fir_buf[n] = lpf;
     n += 1;
   );

   @sample

   // Buffer input.
   in_buf[idx] = 0.5 * (spl0 + spl1);
   (idx += 1) >= fir_len ? idx = 0;

   // Convolve with FIR filter.
   sum = n = 0;
   i = idx;
   loop(fir_len,
     sum += fir_buf[n] * in_buf[i];
     n += 1;
     (i += 1) >= fir_len ? i = 0;
   );

   spl0 = spl1 = sum / scale;

   Window Functions

    * wnd_rect(i, n)                        -- Rectangular
    * wnd_tri(i, n, l)                      -- Triangular
    * wnd_bartlett(i, n)                    -- Bartlett
    * wnd_parzen(i, n)                      -- Parzen
    * wnd_welch(i, n)                       -- Welch

    * wnd_hann(i, n)                        -- Hann
    * wnd_hamming(i, n[, a[, b]])           -- Hamming

    * wnd_cos(i, n, a0, a1, a2[, a3[, a4]]) -- Higher-order generalized cosine
    * wnd_blackman(i, n[, a])               -- Blackman
    * wnd_nuttall(i, n)                     -- Nuttall
    * wnd_blackman_nuttall(i, n)            -- Blackman-Nuttall
    * wnd_blackman_harris(i, n)             -- Blackman-Harris
    * wnd_flat_top(i, n)                    -- SRS flat top

    * wnd_cos(i, n)                         -- Cosine
    * wnd_pow_cos(i, n, a)                  -- Power-of-cosine

    * wnd_gaussian(i, n, s)                 -- Gaussian
    * wnd_gaussian(i, n, s, p)              -- Generalised normal
    * wnd_tukey(i, n, a)                    -- Tukey
    * wnd_kaiser(i, n, a)                   -- Kaiser
    * wnd_poisson(i, n, a)                  -- Poisson

    * wnd_bartlett_hann(i, n)               -- Bartlett-Hann
    * wnd_hann_poisson(i, n, a)             -- Hann-Poisson

    * wnd_lanczos(i, n)                     -- Lanczos
    * wnd_bohman(i, n)                      -- Bohman
    * wnd_cauchy(i, n, a)                   -- Cauchy
    * wnd_connes(i, n, a)                   -- Connes
      Example: y = wnd_blackman(0, 1024);
      Returns the window function for i = [0..n-1], n >= 2.

   Miscellaneous Functions

    * _wnd_i0(x)
      Example: y = _wnd_i0(3*$pi);
      Approximates the zero-th order modified Bessel function of the first
      kind.

*/

@init


// Rectangular

function wnd_rect(i, n)
(
  1;
);


// Triangular

function wnd_tri(i, n, l)
(
  // l = n - 1, n, or n + 1.
  1 - abs((2*i - (n - 1)) / l);
);


// Bartlett (aka Fejer)

function wnd_bartlett(i, n)
(
  // wnd_tri(i, n, n - 1);
  1 - abs(2*i / (n - 1) - 1);
);


// Parzen (aka de la Vallee Poussin)

function wnd_parzen(i, n) 
  local(x)
(
  n *= 0.5;
  i = abs(i - (n - 0.5));

  i < 0.5*n ? (
    x = i / n;
    1 - 6*x*x * (1 - x);
  ) : (
    x = 1 - i / n;
    2*x*x*x;
  );
);


// Welch (aka Riesz)

function wnd_welch(i, n)
(
  1 - sqr(2*i / (n - 1) - 1);
);


// Generalized Hamming

function wnd_hamming(i, n, a, b)
(
  // a = [0.5..1], b = 1 - a
  a - b * cos(2*$pi * i / (n - 1))
);

function wnd_hamming(i, n, a)
(
  // wnd_hamming(i, n, a, 1 - a);
  a - (1 - a) * cos(2*$pi * i / (n - 1));
);


// Hann (aka Hanning)

function wnd_hann(i, n)
(
  // wnd_hamming(i, n, 0.5, 0.5);
  0.5 * (1 - cos(2*$pi * i / (n - 1)));
);


// Hamming

function wnd_hamming(i, n)
(
  // wnd_hamming(i, n, 0.54, 0.46); // Approximation
  // wnd_hamming(i, n, 25/46, 21/46); // Exact
  wnd_hamming(i, n, 0.53836, 0.46164); // Optimal
);


// Higher-order generalized cosine

function wnd_cos(i, n, a0, a1, a2)
  local(x)
(
  x = 2*$pi * i / (n - 1);
  a0 - a1 * cos(x) + a2 * cos(2*x);
);

function wnd_cos(i, n, a0, a1, a2, a3)
  local(x)
(
  x = 2*$pi * i / (n - 1);
  a0 - a1 * cos(x) + a2 * cos(2*x) - a3 * cos(3*x);
);

function wnd_cos(i, n, a0, a1, a2, a3, a4)
  local(x)
(
  x = 2*$pi * i / (n - 1);
  a0 - a1 * cos(x) + a2 * cos(2*x) - a3 * cos(3*x) + a4 * cos(4*x);
);


// Blackman

function wnd_blackman(i, n, a)
(
  // a = [-0.25..+0.25]
  a *= 0.5;
  wnd_cos(i, n, 0.5 - a, 0.5, a);
);

function wnd_blackman(i, n)
(
  // Approximation
  // wnd_blackman(i, n, 0.16); 
  wnd_cos(i, n, 0.42, 0.5, 0.08);

  // Exact
  // wnd_cos(i, n, 7938/18608, 9240/18608, 1430/18608);
);


// Nuttall

function wnd_nuttall(i, n)
(
  wnd_cos(i, n, 0.355768, 0.487396, 0.144232, 0.012604);
);


// Blackman-Nuttall

function wnd_blackman_nuttall(i, n)
(
  wnd_cos(i, n, 0.3635819, 0.4891775, 0.1365995, 0.0106411);
);


// Blackman-Harris

function wnd_blackman_harris(i, n)
(
  wnd_cos(i, n, 0.35875, 0.48829, 0.14128, 0.01168);
);


// Flat top

function wnd_flat_top(i, n)
(
  // SRS flat top from Wikipedia.
  // http://en.wikipedia.org/wiki/Window_function#Flat_top_window
  wnd_cos(i, n, 1/4.636, 1.93/4.636, 1.29/4.636, 0.388/4.636, 0.028/4.636);

  // Alternate flat top coefficients from:
  // http://janroman.dhis.org/AFI/Python/spectrum/src/spectrum/window.py
  // wnd_cos(i, n, 0.21557895, 0.41663158, 0.277263158, 0.083578947, 0.006947368);
  // wnd_cos(i, n, 1/4.6402, 1.93/4.6402, 1.29/4.6402, 0.388/4.6402, 0.0322/4.6402);
);


// Cosine

function wnd_cos(i, n)
(
  sin($pi * i / (n - 1));
);


// Power-of-cosine

function wnd_pow_cos(i, n, a)
(
  // a >= 0
  wnd_cos(i, n)^a;
);


// Bohman

function wnd_bohman(i, n)
( 
  // Source: http://janroman.dhis.org/AFI/Python/spectrum/src/spectrum/window.py
  i = abs(2*i / (n - 1) - 1);
  (1 - i) * cos($pi * i) + sin($pi * i) / $pi;
);


// Gaussian

function wnd_gaussian(i, n, s)
(
  // s > 0
  n = 0.5*(n - 1);
  exp(-0.5 * sqr((i - n) / (s * n)));
);


// Generalised normal

function wnd_gaussian(i, n, s, p)
(
  // s > 0, p > 0 && !(p & 1)
  n = 0.5*(n - 1);
  exp(-(((i - n) / (s * n))^p));
);


// Tukey

function wnd_tukey(i, n, a)
  local(m)
(
  // a = (0..1]
  n -= 1;
  a *= 0.5;
  m = a * n;

  /* i >= 0 && */ i < m ? 0.5 * (1 + cos($pi * (i / m - 1))) :
  i <= n - m ? 1 :
  /* i <= n ? */ 0.5 * (1 + cos($pi * (i / m - 1/a + 1)));
);


// Kaiser (aka Kaiser-Bessel)

function _wnd_i0(x)
  local(x2, fact, y, i)
(
  x2 = x = 0.25*x*x;
  fact = y = i = 1;
  loop(20,
    y += x / (fact*fact);
    x *= x2;
    fact *= (i += 1);
  );
  y;
);

function _wnd_kaiser(i, n, pi_a, i0_a)
  local(x)
(
  x = 2*i / (n - 1) - 1;
  _wnd_i0(pi_a * sqrt(1 - x*x)) / i0_a;
);

function wnd_kaiser(i, n, a)
(
  // a >= 0
  a *= $pi;
  _wnd_kaiser(i, n, a, _wnd_i0(a));
);


// Poisson (exponential)

function wnd_poisson(i, n, a)
(
  // Source: http://janroman.dhis.org/AFI/Python/spectrum/src/spectrum/window.py

  // a >= 0
  i = abs(n * (i / (n - 1) - 0.5));
  exp(-2*i / n * a);
);


// Bartlett-Hann

function wnd_bartlett_hann(i, n)
(
  i /= n - 1;
  0.62 - 0.48 * abs(i - 0.5) - 0.38 * cos(2*$pi * i);
);


// Hann-Poisson (aka Poisson-Hanning)

function wnd_hann_poisson(i, n, a)
(
  wnd_hann(i, n) * wnd_poisson(i, n, a);
);


// Cauchy

function wnd_cauchy(i, n, a)
  local(x)
(
  // Source: http://janroman.dhis.org/AFI/Python/spectrum/src/spectrum/window.py

  // a >= 0
  x = 2*a * (i / (n - 1) - 0.5);
  1/(1 + x*x);
);


// Lanczos (aka Riemann)

function wnd_lanczos(i, n)
  local(x)
(
  x = $pi * (2*i / (n - 1) - 1);
  x < 0 || x > 0 ? sin(x)/x : 1;
);


// Connes

function wnd_connes(i, n, a)
(
  // Source: https://reference.wolfram.com/language/ref/ConnesWindow.html

  // a >= 1
  i = i / (n - 1) - 0.5;
  a *= a;
  sqr(-4*i*i + a) / (a*a);
);
