desc:Simple drum synth
// (c) Theo Niessink 2014, 2015
// License: GPL - http://www.gnu.org/licenses/gpl.html

slider1:-5318008<-36.0,12.0,0.01>-[Deprecated] Bass Drum (dB)
slider2:-5318008<-36.0,12.0,0.01>-[Deprecated] Snare Drum (dB)
slider3:-5318008<-36.0,12.0,0.01>-[Deprecated] Side Stick (dB)
slider4:-5318008<-36.0,12.0,0.01>-[Deprecated] Hi-hat (dB)
slider5:-5318008<-36.0,12.0,0.01>-[Deprecated] Low Tom (dB)
slider6:-5318008<-36.0,12.0,0.01>-[Deprecated] Mid Tom (dB)
slider7:-5318008<-36.0,12.0,0.01>-[Deprecated] High Tom (dB)
slider8:-5318008<-36.0,12.0,0.01>-[Deprecated] Ride Cymbal (dB)
slider9:-5318008<-36.0,12.0,0.01>-[Deprecated] Crash Cymbal (dB)
slider10:0<0,1>-Unused
slider11:-5318008<-100,100,1>-[Deprecated] Bass Drum (%)
slider12:-5318008<-100,100,1>-[Deprecated] Snare Drum (%)
slider13:-5318008<-100,100,1>-[Deprecated] Side Stick (%)
slider14:-5318008<-100,100,1>-[Deprecated] Hi-hat (%)
slider15:-5318008<-100,100,1>-[Deprecated] Low Tom (%)
slider16:-5318008<-100,100,1>-[Deprecated] Mid Tom (%)
slider17:-5318008<-100,100,1>-[Deprecated] High Tom (%)
slider18:-5318008<-100,100,1>-[Deprecated] Ride Cymbal (%)
slider19:-5318008<-100,100,1>-[Deprecated] Crash Cymbal (%)
slider20:0<0,1>-Unused
slider21:0<0,16,1{Any,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>MIDI Channel
slider22:1<0,2,1{Mono,Stereo,Multichannel}>Output Mode
slider23:0<0,100,1>Drive (%)
slider24:0.0<-36.0,12.0,0.01>Volume (dB)
slider25:0<0,1>-Unused
slider26:-6.0<-36.0,12.0,0.01>Bass Drum (dB)
slider27:0<-100,100,1>Bass Drum (%)
slider28:0.0<-36.0,12.0,0.01>Snare Drum (dB)
slider29:0<-100,100,1>Snare Drum (%)
slider30:0.0<-36.0,12.0,0.01>Side Stick (dB)
slider31:0<-100,100,1>Side Stick (%)
slider32:-18.0<-36.0,12.0,0.01>Hi-hat (dB)
slider33:33<-100,100,1>Hi-hat (%)
slider34:-6.0<-36.0,12.0,0.01>Low Tom (dB)
slider35:-50<-100,100,1>Low Tom (%)
slider36:-6.0<-36.0,12.0,0.01>Mid Tom (dB)
slider37:-10<-100,100,1>Mid Tom (%)
slider38:-6.0<-36.0,12.0,0.01>High Tom (dB)
slider39:25<-100,100,1>High Tom (%)
slider40:-18.0<-36.0,12.0,0.01>Ride Cymbal (dB)
slider41:-33<-100,100,1>Ride Cymbal (%)
slider42:-18.0<-36.0,12.0,0.01>Crash Cymbal (dB)
slider43:20<-100,100,1>Crash Cymbal (%)
slider44:-12.0<-36.0,12.0,0.01>Tambourine (dB)
slider45:0<-100,100,1>Tambourine (%)
slider46:-6.0<-36.0,12.0,0.01>Cowbell (dB)
slider47:0<-100,100,1>Cowbell (%)

out_pin:Bass Drum
out_pin:Bass Drum
out_pin:Snare Drum
out_pin:Snare Drum
out_pin:Side Stick
out_pin:Side Stick
out_pin:Hi-hat
out_pin:Hi-hat
out_pin:Low Tom
out_pin:Low Tom
out_pin:Mid Tom
out_pin:Mid Tom
out_pin:High Tom
out_pin:High Tom
out_pin:Ride Cymbal
out_pin:Ride Cymbal
out_pin:Crash Cymbal
out_pin:Crash Cymbal
out_pin:Tambourine
out_pin:Tambourine
out_pin:Cowbell
out_pin:Cowbell

import Tale/midi_queue.jsfx-inc
import Tale/adsr.jsfx-inc
import Tale/noise_generator.jsfx-inc
import Tale/sine_oscillator.jsfx-inc
import Tale/poly_blep.jsfx-inc
import Tale/rc_filter.jsfx-inc
import Tale/rbj_filter.jsfx-inc

@init

noise_gain = sqrt(srate / 44100);

function int(x) ( x|0 );
function gain(db, inf) ( db <= inf ? 0 : 10^(0.05 * db) );
function legacy(i, j) ( slider(i) == -5318008 ? slider(j) : slider(j) = slider(i) );

function tanh(x)
  local(x2)
(
  x2 = x*x;
  max(-1, min(1, (((x2 + 378)*x2 + 17325)*x2 + 135135)*x / (((28*x2 + 3150)*x2 + 62370)*x2 + 135135)));
);

function pan(gain, pos)
  // global(multich, vol)
  instance(ch, gain0, gain1)
(
  multich > 0 ? (
    multich == 1 ? multich = 0;
    ch = multich;
    multich += 2;
  ) : (
    ch = 0;
  );

  gain = vol * gain(gain, -36.0);
  pos = multich >= 0 ? max(-100, min(100, pos)) * 0.01 : 0;

  pos *= 0.25*$pi;
  gain *= sqrt(2) * (1 - sqrt(0.5) * (1 / cos(pos) - 1));

  pos += 0.25*$pi;
  gain0 = cos(pos) * gain;
  gain1 = sin(pos) * gain;
);

function sample(out)
  // global(drive)
  instance(ch, gain0, gain1)
  static(dc, tanh_dc)
(
  drive > 1 ? (
    !dc ? tanh_dc = tanh(dc = 0.05);
    out = tanh(drive * out + dc) - tanh_dc;
  );

  !ch ? (
    spl0 += gain0 * out;
    spl1 += gain1 * out;
  ) : (
    spl(ch) += gain0 * out;
    spl(ch + 1) += gain1 * out;
  );
);

// Bass Drum

kick.env.adsr_seta(0.012);
kick.env.adsr_setd(0);
kick.env.adsr_sets(1);
kick.env.adsr_setr(0.300);

kick.osc.sin_setf(50);

function kick(note, vel)
  instance(env)
(
  note == 35 || note == 36 ? env.adsr_a(vel / 127);
);

function kick()
  instance(env, osc)
(
  env.adsr_process() ? (
    env.state == 4 ? env.adsr_r();
    env.env * osc.sin_sin();
  );
);

// Snare Drum

snare_drum.env.adsr_seta(0.005);
snare_drum.env.adsr_setd(0.025);
snare_drum.env.adsr_sets(0.5);
snare_drum.env.adsr_setr(0.350);

snare_drum.lp.rc_setf(200);

function snare_drum(note, vel)
  instance(env, lp, dry)
(
  // Snare Drum 1
  note == 38 ? (
    dry = 0.045;
  ) :
  // Snare Drum 2
  note == 40 ? (
    dry = 0.1;
  ) : (
    note = 0;
  );

  note ? (
    lp.lp = 0;
    env.adsr_a(vel / 127);
  );
);

function snare_drum()
  // global(noise)
  instance(env, lp, dry)
  local(out)
(
  env.adsr_process() ? (
    env.state == 4 ? env.adsr_r();
    out = env.env * noise;
    lp.rc_lp(out) + dry * out;
  );
);

// Side Stick/Rimshot

side_stick.env.adsr_seta(0);
side_stick.env.adsr_setd(0.100);
side_stick.env.adsr_sets(0);
side_stick.env.adsr_setr(0);

side_stick.hp.rc_setf(1000);
side_stick.lp.rc_setf(1500);

function side_stick(note, vel)
  instance(env, hp, lp)
(
  note == 37 ? (
    hp.lp = lp.lp = 0;
    env.adsr_a(vel / 127);
  );
);

function side_stick()
  // global(noise)
  instance(env, hp, lp)
(
  env.adsr_process() ? (
    env.state == 4 ? env.adsr_r();
    lp.rc_lp(hp.rc_hp(env.env * noise));
  );
);

// Hi-hat

hihat.env.adsr_seta(0);
hihat.hp.rc_setf(6000);

function hihat(note, vel)
  instance(env)
  local(d, s, r)
(
  // Closed Hi-hat
  note == 42 ? (
    d = 0.085;
    s =
    r = 0;
  ) :
  // Pedal Hi-hat
  note == 44 ? (
    d = 0.008;
    s = 0.15;
    r = 0.050;
  ) :
  // Open Hi-hat
  note == 46 ? (
    d = 0.085;
    s = 0.15;
    r = 1.5;
  ) : (
    note = 0;
  );

  note ? (
    env.adsr_setd(d);
    env.adsr_sets(s);
    env.adsr_setr(r);

    env.adsr_a(vel / 127);
  );
);

function hihat()
  // global(noise)
  instance(env, hp)
(
  env.adsr_process() ? (
    env.state == 4 ? env.adsr_r();
    hp.rc_hp(env.env * noise);
  );
);

// Low Tom

low_tom.env.adsr_seta(0.015);
low_tom.env.adsr_setd(0);
low_tom.env.adsr_sets(1);
low_tom.env.adsr_setr(1.5);

low_tom.osc.sin_setf(75);
low_tom.lp.rc_setf(115);

function low_tom(a, b, note, vel)
  instance(env, lp, lp2)
(
  note == a || note == b ? (
    lp.lp = lp2.lp = 0;
    lp2.a = lp.a;
    env.adsr_a(vel / 127);
  );
);

function low_tom(note, vel)
(
  this.low_tom(41, 43, note, vel);
);

function low_tom()
  // global(noise)
  instance(env, osc, lp, lp2)
(
  env.adsr_process() ? (
    env.state == 4 ? env.adsr_r();
    env.env * (osc.sin_sin() + lp2.rc_lp(lp.rc_lp(noise)));
  );
);

// Mid Tom

mid_tom.env.adsr_seta(0.015);
mid_tom.env.adsr_setd(0);
mid_tom.env.adsr_sets(1);
mid_tom.env.adsr_setr(1.25);

mid_tom.osc.sin_setf(100);
mid_tom.lp.rc_setf(125);

function mid_tom(note, vel)
(
  this.low_tom(45, 47, note, vel);
);

function mid_tom()
(
  this.low_tom();
);

// High Tom

high_tom.env.adsr_seta(0.015);
high_tom.env.adsr_setd(0);
high_tom.env.adsr_sets(1);
high_tom.env.adsr_setr(1.0);

high_tom.osc.sin_setf(115);
high_tom.lp.rc_setf(115);

function high_tom(note, vel)
(
  this.low_tom(48, 50, note, vel);
);

function high_tom()
(
  this.low_tom();
);

// Ride Cymbal

ride_cymbal.env.adsr_seta(0);
ride_cymbal.env.adsr_setd(0.015);
ride_cymbal.env.adsr_sets(0.25);
ride_cymbal.env.adsr_setr(1.5);

function ride_cymbal(note, vel)
  instance(env, bp)
(
  // Ride Cymbal
  note == 51 || note == 59 ? (
    bp.rbj_bp(6000, 2.0);
  ) :
  // Ride Bell
  note == 53 ? (
    bp.rbj_bp(5300, 5.0);
  ) : (
    note = 0;
  );

  note ? env.adsr_a(vel / 127);
);

function ride_cymbal()
  // global(noise)
  instance(env, bp)
(
  env.adsr_process() ? (
    env.state == 4 ? env.adsr_r();
    bp.rbj_df1(env.env * noise);
  );
);

// Crash Cymbal

crash_cymbal.env.adsr_seta(0);
crash_cymbal.env.adsr_setd(0.100);
crash_cymbal.env.adsr_sets(0.9);
crash_cymbal.env.adsr_setr(2.5);

crash_cymbal.bp.rbj_bp(4000, 2.5);

function crash_cymbal(note, vel)
  instance(env)
(
  note == 49 || note == 52 || note == 55 || note == 57 ? env.adsr_a(vel / 127);
);

function crash_cymbal()
(
  this.ride_cymbal();
);

// Tambourine

tambourine.env.adsr_seta(0.040);
tambourine.env.adsr_setd(0.060);
tambourine.env.adsr_sets(0.1);
tambourine.env.adsr_setr(0.120);

tambourine.hp.rbj_hp(5500, 10.0);
tambourine.lp.rc_setf(1833);

function tambourine(note, vel)
  instance(env)
(
  note == 54 ? env.adsr_a(vel / 127);
);

function tambourine()
  // global(noise)
  instance(env, hp, lp)
(
  env.adsr_process() ? (
    env.state == 4 ? env.adsr_r();
    lp.rc_lp(hp.rbj_df1(env.env * noise));
  );
);

// Cowbell

cowbell.env.adsr_seta(0.003);
cowbell.env.adsr_setd(0.350);
cowbell.env.adsr_sets(0);
cowbell.env.adsr_setr(0);

cowbell.osc.poly_setf(465);
cowbell.bp.rbj_bp(1860, sqrt(0.5));

function cowbell(note, vel)
  instance(env)
(
  note == 56 ? env.adsr_a(vel / 127);
);

function cowbell()
  // global(noise)
  instance(env, osc, bp)
(
  env.adsr_process() ? (
    env.state == 4 ? env.adsr_r();
    sqr(env.env) * bp.rbj_df1(osc.poly_trap() + 0.1 * noise);
  );
);

@slider

midi_ch = max(0, min(16, int(slider21))) - 1;
multich = max(0, min(2, int(slider22))) - 1;

drive = 10^(0.012 * max(0, slider23));
vol = gain(slider24, -36.0);
drive > 1 ? vol *= drive^(-0.5);

kick.pan(legacy(1, 26), legacy(11, 27));
snare_drum.pan(legacy(2, 28), legacy(12, 29));
side_stick.pan(legacy(3, 30), legacy(13, 31));
hihat.pan(legacy(4, 32), legacy(14, 33));
low_tom.pan(legacy(5, 34), legacy(15, 35));
mid_tom.pan(legacy(6, 36), legacy(16, 37));
high_tom.pan(legacy(7, 38), legacy(17, 39));
ride_cymbal.pan(legacy(8, 40), legacy(18, 41));
crash_cymbal.pan(legacy(9, 42), legacy(19, 43));
tambourine.pan(slider44, slider45);
cowbell.pan(slider46, slider47);

@block

midiq.midiq_collect(midi_ch, 2);

@sample

while(midiq.midiq_remove() ? (
  /* status = midiq.msg1 & 0xF0;

  status == 0x90 && */ midiq.msg3 ? (
    kick.kick(midiq.msg2, midiq.msg3) ||
    snare_drum.snare_drum(midiq.msg2, midiq.msg3) ||
    side_stick.side_stick(midiq.msg2, midiq.msg3) ||
    hihat.hihat(midiq.msg2, midiq.msg3) ||
    low_tom.low_tom(midiq.msg2, midiq.msg3) ||
    mid_tom.mid_tom(midiq.msg2, midiq.msg3) ||
    high_tom.high_tom(midiq.msg2, midiq.msg3) ||
    ride_cymbal.ride_cymbal(midiq.msg2, midiq.msg3) ||
    crash_cymbal.crash_cymbal(midiq.msg2, midiq.msg3) ||
    tambourine.tambourine(midiq.msg2, midiq.msg3) ||
    cowbell.cowbell(midiq.msg2, midiq.msg3);
  // ) :

  // status == 0x80 || status == 0x90 ? (
    // status == 0x90 ? midiq.msg3 = 64;
  );
  
  1; // while
));

noise = noise_gain * rng.lcg_white();

kick.sample(kick.kick());
snare_drum.sample(snare_drum.snare_drum());
side_stick.sample(side_stick.side_stick());
hihat.sample(hihat.hihat());
low_tom.sample(low_tom.low_tom());
mid_tom.sample(mid_tom.mid_tom());
high_tom.sample(high_tom.high_tom());
ride_cymbal.sample(ride_cymbal.ride_cymbal());
crash_cymbal.sample(crash_cymbal.crash_cymbal());
tambourine.sample(tambourine.tambourine());
cowbell.sample(cowbell.cowbell());
