desc:ADSR envelope
// (c) Theo Niessink 2013
// License: GPL - http://www.gnu.org/licenses/gpl.html

/* Example

   desc:Mono synth with ADSR
   slider1:3<0,5000,1>Attack (ms)
   slider2:1000<1,15000,1>Decay (ms)
   slider3:-12.0<-120.0,24.0,1.0>Sustain (dB)
   slider4:500<0,5000,1>Release (ms)

   import adsr.jsfx-inc
   import mono_synth.jsfx-inc
   import poly_blep.jsfx-inc

   @slider

   adsr.adsr_seta(slider1 * 0.001);
   adsr.adsr_setd(slider2 * 0.001);
   adsr.adsr_sets(10^(slider3 / 20));
   adsr.adsr_setr(slider4 * 0.001);

   @sample

   // Parse the MIDI messages in the queue
   synth.synth_midi();

   // Process the ADSR envelope
   synth.note_change ? synth.note_on ? adsr.adsr_a(synth.velocity) : adsr.adsr_r();
   adsr.adsr_process() ? (

     // Process Pitch Wheel and Note On/Off
     synth.synth_pitch() || synth.synth_note() ? osc.poly_setf(synth.freq);

     // Apply the ADSR envelope to the output sample
     spl0 = spl1 = 0.5 * adsr.env * osc.poly_saw();
   );

   Setting Functions

    * adsr_seta(t) -- Attack
    * adsr_setd(t) -- Decay
    * adsr_sets(g) -- Sustain
    * adsr_setr(t) -- Release
      Example: adsr.adsr_seta(0.003);
      Sets the ADSR envelope time (specified in seconds) or gain value.

   Processing Functions

    * adsr_a(scale) -- Attack
      Example: adsr.adsr_a(1.0);
      Starts processing the ADSR envelope, scaling it to [0.0..scale].

    * adsr_d()      -- Decay
    * adsr_s()      -- Sustain
    * adsr_r()      -- Release
      Example: adsr.adsr_r();
      Continues processing the ADSR envelope.

    * adsr_process()
      Example: adsr.adsr_process();
      Processes the ADSR envelope, and returns its state.

      Note: You should call this function from the @sample section.

   Instance Variables

    * state
      Example: released = !adsr.state;
      The current state (1=attack, 2=decay, 4=sustain, 8=release, 0=off).

    * env
      Example: spl0 *= adsr.env;
      The scaled ADSR envelope output.

    * scale
      Example: adsr2.adsr_a(adsr1.scale);
      The current scale value.

*/

@init


function _adsr_set(t)
(
  1 / (0.2 * t * srate + 1);
);

function adsr_seta(t)
  instance(a)
(
  a = _adsr_set(t);
);

function adsr_setd(t)
  instance(d)
(
  d = _adsr_set(t);
);

function adsr_sets(g)
  instance(s, state)
(
  state == 4 ? state = 2;
  s = g <= 0.000001 ? 0 : g;
);

function adsr_setr(t)
  instance(r)
(
  r = _adsr_set(t);
);


function _adsr_end()
  instance(state, env)
(
  state = env = 0;
);

function adsr_r()
  instance(state, r)
(
  r < 1 ? (
    state = 8;
  ) : (
    this._adsr_end();
  );
);

function adsr_s()
  instance(state, s, env, scale)
(
  env = scale * s;
  state = 4;
);

function adsr_d()
  instance(state, d)
(
  d < 1 ? (
    state = 2;
  ) : (
    this.adsr_s();
  );
);

function adsr_a(scale)
  instance(state, a)
(
  this.scale = scale;

  a < 1 ? (
    state = 1;
  ) : (
    this.adsr_d();
  );
);


function adsr_process()
  instance(state, a, d, s, r, env, scale)
  local(tmp)
(
  // Sustain
  state == 4 ? (
    1;
  ) :

  // Decay
  state == 2 ? (
    tmp = scale * s;
    env += d * (tmp - env);
    abs(env - tmp) <= 0.000001 ? this.adsr_s();
  ) :

  // Release
  state == 8 ? (
    env += r * (0 - env);
    abs(env) <= 0.000001 ? this._adsr_end();
  ) :

  // Attack
  state == 1 ? (
    env += a * (scale - env);
    abs(env - scale) <= exp(-5) ? this.adsr_d();
  );

  state;
);
