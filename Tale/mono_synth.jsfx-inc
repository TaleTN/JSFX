desc:Mono synth featuring Note On/Off, Pitch Wheel and Sustain
// (c) Theo Niessink 2013
// License: GPL - http://www.gnu.org/licenses/gpl.html

/* Example

   Note: A more advanced example is included with adsr.jsfx-inc.

   desc:Mono synth

   import mono_synth.jsfx-inc
   import poly_blep.jsfx-inc

   @sample

   synth.synth_midi() ? (
     synth.synth_pitch() || synth.synth_note() ? osc.poly_setf(synth.freq);
     spl0 = spl1 = 0.5 * synth.velocity * osc.poly_tri();
   );

   Setting Functions

    * synth_setch(ch)
      Example: synth.synth_setch(1);
      Sets the receiving MIDI channel (0 for any).

    * synth_setf(f)
      Example: synth.synth_setf(440);
      Sets the tuning (specified in Hz) of A4 (MIDI note #69).

    * synth_set_pitch(range)
      Example: synth.synth_set_pitch(200);
      Sets the Pitch Wheel range (specified in cents).

   MIDI Functions

    * synth_init(index, size)
      Example: synth.synth_init(0, 256);
      Sets the offset and size of the local memory buffer to store the MIDI
      queue in.

      Note: You should call this function from the @init section.

    * synth_collect()
      Example: synth.synth_collect();
      Receives any MIDI messages, and adds them to the MIDI queue.

      Note: You should call this function from the @block section. If there
      is no @block section, then synth.synth_collect() will automatically be
      called.

    * synth_midi()
      Example: synth.synth_midi();
      Processes messages in the MIDI queue. Returns 1 if a note is playing,
      or 0 otherwise.

      Note: You should call this function from the @sample section.

    * synth_all_notes_off()
      Example: synth.synth_all_notes_off();
      Stops the current playing note.

   Processing Functions

    * synth_pitch()
      Example: synth.synth_pitch();
      Updates the note frequency when the Pitch Wheel changes (i.e. when
      pitch_change is 1).

      Note: You should call this function after synth_midi(), but before
      synth_note().

    * synth_note()
      Example: synth.synth_note();
      Updates the note frequency when a note is played (i.e. when
      note_change is 1).

      Note: You should call this function after synth_midi() and
      synth_pitch().

   Instance Variables

    * ch
      Example: any = (synth.ch == 0);
      The receiving MIDI channel (0 for any).

    * note
      Example: octave = floor(synth.note / 12);
      The current MIDI note number [0..127].

    * note_on
    * note_off
      Example: synth.note_off ? spl0 = 0;
      The Note On/Off state [0, 1].

    * sustain
      Example: on = synth.sustain;
      The Damper Pedal (Sustain) state [0, 1].

    * velocity
      Example: spl0 *= synth.velocity;
      The current velocity value [0.0..1.0].

    * freq
      Example: dt = synth.freq / srate;
      The current frequency, depending on tuning, MIDI note number, and
      pitch.

    * pitch
      Example: freq = base_freq * synth.pitch;
      The current pitch, depending on the Pitch Wheel and range.

    * pitch_wheel
      Example: pitch = 2^(synth.pitch_wheel / 12);
      The current Pitch Wheel value [-1.0..+1.0].

    * pitch_range
      Example: cents = synth.pitch_range * 1200;
      The Pitch Wheel range.

    * tuning
      Example: freq = synth.tuning;
      The tuning (in Hz) of A4 (MIDI note #69).

    * note_change  -- Note On/Off
    * pitch_change -- Pitch Wheel
    * freq_change  -- Note frequency
      Example: synth.freq_change ? osc.poly_setf(synth.freq);
      These flags are set to 1 to indicate a change.

      Note: You should reset the flags to 0 after you have processed the
      change.

*/

import midi_queue.jsfx-inc

@init


function synth_init(index, size)
  instance(midi)
(
  midi.midiq_init(index, size);
);


function _synth_freq()
  instance(freq, freq_change, note, tuning, pitch)
(
  tuning <= 0 ? tuning = 440;
  pitch <= 0 ? pitch = 1;

  freq_change = 1;
  freq = tuning * 2^((note - 69) / 12) * pitch;
);


function _synth_pitch()
  instance(pitch, pitch_wheel, pitch_range)
(
  pitch_range <= 0 ? pitch_range = 200/1200;

  pitch = pitch_range < 0.00001 ? 1 : 2^(pitch_wheel * pitch_range);
);


function synth_setch(ch)
(
  this.ch = ch;
);


function synth_setf(f)
  instance(tuning)
(
  tuning = f;

  this._synth_freq();
);


function synth_set_pitch(range)
  instance(pitch_range)
(
  pitch_range = !range ? 0.000005 : range/1200;

  this._synth_pitch();
  this._synth_freq();
);


function synth_collect()
  instance(midi)
(
  midi.midiq_collect();
);


function synth_all_notes_off()
  instance(note_on, note_off, note_change)
(
  note_on ? (
    note_off = note_change = 1;
    note_on = 0;
  );
);


function synth_midi()
  instance(midi, ch, note, note_on, note_off, note_change, velocity, pitch_wheel, pitch_change, sustain)
  local(msg1, msg2, msg3)
(
  while(
    midi.midiq_remove() && (!ch || midi.msg1 & 0x0F == ch - 1) ? (
      msg1 = midi.msg1 & 0xF0;
      msg2 = midi.msg23 & 0x7F;
      msg3 = midi.msg23 >> 8;

      // Note On
      msg1 == 0x90 && msg3 ? (
	    note = msg2;
        velocity = msg3 / 127;
        note_on = note_change = 1;
        note_off = 0;
      ) :

      // Note Off
      msg1 == 0x80 || (msg1 == 0x90 && !msg3) ? (
        msg2 == note ? (
          !sustain ? (
            velocity = msg1 == 0x80 ? msg3 / 127 : 0.5;
            note_change = 1;
          );
          note_on = sustain;
          note_off = 1;
        );
      ) :

      // Pitch Wheel
      msg1 == 0xE0 ? (
        pitch_wheel = (msg3 << 7 | msg2) - 8192;
        pitch_wheel = pitch_wheel / (pitch_wheel <= 0 ? 8192 : 8191);
        pitch_change = 1;
      ) :

      // Control Change
      msg1 == 0xB0 ? (

        // Damper Pedal (Sustain)
        msg2 == 64 ? (
          sustain = msg3 >= 64;
          !sustain && note_off ? (
            note_on = 0;
            note_change = 1;
          );
        ) :

        // All Notes Off
        msg2 == 123 ? (
          this.synth_all_notes_off();
        );
      );

      1; // while midiq_remove()
    );
  );

  note_on;
);


function synth_pitch()
  instance(pitch_change)
(
  pitch_change ? (
    pitch_change = 0;

    this._synth_pitch();
    this._synth_freq();
  );
);


function synth_note()
  instance(note_change)
(
  note_change ? (
    note_change = 0;

    this._synth_freq();
  );
);


@block

synth.synth_collect();
