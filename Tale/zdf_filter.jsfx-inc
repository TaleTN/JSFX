desc:2nd order zero-delay feedback state variable filter
// (c) Theo Niessink 2013
// License: GPL - http://www.gnu.org/licenses/gpl.html

// Based on the rsStateVariableFilter C++ class by Robin Schmidt, as posted
// (in the public domain) on the KVR forum.
// http://www.kvraudio.com/forum/viewtopic.php?p=5243733#5243733

/* Example #1

   desc:Low-pass filter
   slider1:1000<20,20000,1>Corner Frequency (Hz)
   slider2:-3.0<-40.0,12.0,0.1>Gain (dB)

   import zdf_filter.jsfx-inc

   @slider
   q = 10^(slider2 / 20);
   lp.zdf_lp(slider1, q);

   @sample
   mono = 0.5 * (spl0 + spl1);
   spl0 = spl1 = lp.zdf_svf(mono);

   Example #2

   desc:Band-pass filter
   slider1:1000<20,20000,1>Corner Frequency (Hz)
   slider2:2.0<0.01,4.0,0.01>Bandwidth (oct)

   import zdf_filter.jsfx-inc

   @slider
   bp.zdf_bp2(slider1, slider2);

   @sample
   mono = 0.5 * (spl0 + spl1);
   spl0 = spl1 = bp.zdf_svf(mono);

   Setting Functions

    * zdf_lp(fc, q)             -- Low-pass
    * zdf_hp(fc, q)             -- High-pass
    * zdf_bp(fc, q)             -- Band-pass (constant skirt gain)
    * zdf_bp2(fc, bw)           -- Band-pass (constant peak gain)
    * zdf_notch(fc, bw)         -- Band-stop (notch)
    * zdf_peak(fc, q, bw)       -- Bell (peaking EQ)
    * zdf_low_shelf(fc, q, bw)  -- Low-shelf
    * zdf_high_shelf(fc, q, bw) -- High-shelf
    * zdf_ap(fc, bw)            -- All-pass
      Example: lp.zdf_lp(1000, 0.7);
      Sets up the filter for the specified cutoff frequency (in Hz), Q
      factor, and/or bandwidth (in octaves).

   Filter Functions

    * ss = zdf_svf(s)
      Example: ss = lp.zdf_svf(s);
      Sends the parameter through the filter, and returns its output.

    * zdf_svf_lp(s) -- Low-pass
    * zdf_svf_hp(s) -- High-pass
    * zdf_svf_bp(s) -- Band-pass
      Example: ss = lp.zdf_svf_lp(s);
      Specialized versions of zdf_svf(), each optimized for a specific
      filter type.

*/

@init


function _zdf_setfc(fc)
  instance(g)
(
  fc = min(fc, 0.49 * srate);

  // embedded integrator gain (Fig 3.11)
  g = tan($pi * fc / srate);

  fc;
);


// Sets the bandwidth (in octaves) for (constant peak gain) bandpass filters
// and bell filters. In the case of shelving filters, this also determines
// the slope at the halfgain point. At
//
// bw = (2 * asinh(1/sqrt(2))) / log(2) = 1.899968626952992
// 
// the slope is as steep as it can be without overshooting.

function _zdf_setbw(fc, bw)
  instance(g, r2)
  local(fl, gl, r)
(
  // lower bandedge frequency (in Hz)
  fl = fc * 2^(-0.5 * bw);
  // warped radian lower bandedge frequency /(2*fs)
  gl = tan($pi * fl / srate);
  // ratio between warped lower bandedge- and center-frequencies
  // unwarped: r = 2^(-0.5 * bw) -> approximation for low center-frequencies
  r = gl / g;
  r *= r;

  r2 = 2 * sqrt((1 - r) * (1 - r) / (4 * r));
);


function _zdf_seth()
  instance(g, r2, h)
(
  // factor for feedback precomputation
  h = 1/(1 + r2*g + g*g);
);


// Bypass

function zdf_bypass(fc, q)
  instance(r2, cl, cb, ch)
(
  this._zdf_setfc(fc);

  r2 = 1/q;
  cl = 1;
  cb = r2;
  ch = 1;

  this._zdf_seth();
);


// Low-pass

function zdf_lp(fc, q)
  instance(r2, cl, cb, ch)
(
  this._zdf_setfc(fc);

  r2 = 1/q;
  cl = 1;
  cb = 0;
  ch = 0;

  this._zdf_seth();
);


// High-pass

function zdf_hp(fc, q)
  instance(r2, cl, cb, ch)
(
  this._zdf_setfc(fc);

  r2 = 1/q;
  cl = 0;
  cb = 0;
  ch = 1;

  this._zdf_seth();
);


// Band-pass (constant skirt gain)

function zdf_bp(fc, q)
  instance(r2, cl, cb, ch)
(
  this._zdf_setfc(fc);

  r2 = 1/q;
  cl = 0;
  cb = 1;
  ch = 0;

  this._zdf_seth();
);


// Band-pass (constant peak gain)

function zdf_bp2(fc, bw)
  instance(cl, cb, ch)
(
  fc = this._zdf_setfc(fc);

  this._zdf_setbw(fc, bw);
  cl = 0;
  cb = 1;
  ch = 0;

  this._zdf_seth();
);

// Alternate band-pass, compatible with RBJ cookbook BPF (constant 0 dB peak
// gain):
// 
// r2 = 1/q;
// cl = 0;
// cb = r2;
// ch = 0;


// Band-stop (notch)

function zdf_notch(fc, bw)
  instance(cl, cb, ch)
(
  fc = this._zdf_setfc(fc);

  this._zdf_setbw(fc, bw);
  cl = 1;
  cb = 0;
  ch = 1;

  this._zdf_seth();
);

// Alternate band-stop, compatible with RBJ cookbook notch:
//
// r2 = 1/q;
// cl = 1;
// cb = 0;
// ch = 1;


// Bell (peaking EQ)

function zdf_peak(fc, q, bw)
  instance(g, r2, cl, cb, ch)
  local(fl, wl, r)
(
  fc = this._zdf_setfc(fc);

  // lower bandedge frequency (in Hz)
  fl = fc * 2^(-0.5 * bw);
  // warped radian lower bandedge frequency /(2*fs)
  wl = tan($pi * fl / srate);
  // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the warped upper
  // bandedge, wc the center
  r = g / wl;
  r *= r;

  r2 = 2 * sqrt(((r*r + 1) / r - 2) / (4 * q));
  cl = 1;
  cb = r2 * q;
  ch = 1;

  this._zdf_seth();
);


// Low-shelf

function _zdf_sinh(x)
(
  x = exp(x);
  0.5 * (x - 1/x);
);

function zdf_low_shelf(fc, q, bw)
  instance(g, r2, cl, cb, ch)
  local(a)
(
  this._zdf_setfc(fc);

  a = sqrt(q);
  // scale SVF-cutoff frequency for shelvers
  g /= sqrt(a);
  r2 = 2 * _zdf_sinh(0.5 * log(2) * bw);
  cl = q;
  cb = r2 * a;
  ch = 1;

  this._zdf_seth();
);


// High-shelf

function zdf_high_shelf(fc, q, bw)
  instance(g, r2, cl, cb, ch)
  local(a)
(
  this._zdf_setfc(fc);

  a = sqrt(q);
  // scale SVF-cutoff frequency for shelvers
  g *= sqrt(a);
  r2 = 2 * _zdf_sinh(0.5 * log(2) * bw);
  cl = 1;
  cb = r2 * a;
  ch = q;

  this._zdf_seth();
);


// All-pass

function zdf_ap(fc, bw)
  instance(r2, cl, cb, ch)
(
  fc = this._zdf_setfc(fc);

  this._zdf_setbw(fc, bw);
  cl = 1;
  cb = -r2;
  ch = 1;

  this._zdf_seth();
);

// Alternate all-pass, compatible with RBJ cookbook APF:
//
// r2 = 1/q;
// cl = 1;
// cb = -r2;
// ch = 1;


// Returns an appropriate linear combination of the 3 outputs [lowpass,
// bandpass, highpass] of the core SVF in order to achieve various filter
// modes.

function zdf_svf(s)
  instance(s1, s2, g, r2, h, cl, cb, ch)
  local(yl, yb, yh)
(
  // compute highpass output via Eq. 5.1:
  yh = (s - r2*s1 - g*s1 - s2) * h;

  // compute bandpass output by applying 1st integrator to highpass output:
  yb = g*yh + s1;
  // state update in 1st integrator
  s1 = g*yh + yb;

  // compute lowpass output by applying 2nd integrator to bandpass output:
  yl = g*yb + s2;
  // state update in 2nd integrator
  s2 = g*yb + yl;

  cl*yl + cb*yb + ch*yh;
);


// Optimized versions of zdf_svf() returning only 1 of the 3 outputs.

function zdf_svf_lp(s)
  instance(s1, s2, g, r2, h)
  local(yl, yb, yh)
(
  yh = (s - r2*s1 - g*s1 - s2) * h;
  yb = g*yh + s1; s1 = g*yh + yb;
  yl = g*yb + s2; s2 = g*yb + yl;
  yl;
);

function zdf_svf_hp(s)
  instance(s1, s2, g, r2, h)
  local(yl, yb, yh)
(
  yh = (s - r2*s1 - g*s1 - s2) * h;
  yb = g*yh + s1; s1 = g*yh + yb;
  yl = g*yb + s2; s2 = g*yb + yl;
  yh;
);

function zdf_svf_bp(s)
  instance(s1, s2, g, r2, h)
  local(yl, yb, yh)
(
  yh = (s - r2*s1 - g*s1 - s2) * h;
  yb = g*yh + s1; s1 = g*yh + yb;
  yl = g*yb + s2; s2 = g*yb + yl;
  yb;
);
